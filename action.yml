name: none-shall-pass
description: Run validations against hyperlinks in all markdown files (including Wiki pages)
inputs:
  debug:
    description: Debug flag
    required: false
    default: "false"
  owner:
    description: Owner/Organization of the repository
    required: false
    default: ${{ github.repository_owner }}
  repo:
    description: Name of the repository
    required: false
    default: ${{ github.event.repository.name }}
  excludeHostnames:
    description: Hostnames for which the failure should be ignored
    required: false
    default: ""
  failOnError:
    description: Fail the action if any hyperlinks are broken
    required: false
    default: "false"
outputs: { }
runs:
  using: composite
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect OS and Architecture
      run: |
        # NOTE: `uname -m` is more accurate and universal than `arch`
        # See https://en.wikipedia.org/wiki/Uname
        unamem="$(uname -m)"
        case $unamem in
        *aarch64*|arm64)
            architecture="arm64";;
        *64*)
            architecture="amd64";;
        *86*)
            architecture="386";;
        *armv5*)
            architecture="armv5";;
        *armv6*)
            architecture="armv6";;
        *armv7*)
            architecture="armv7";;
        *)
            echo "::error title=Architecture::Aborted, unsupported or unknown architecture: $unamem"
            exit 1
            ;;
        esac

        binary="none-shall-pass"
        extension=".tar.gz"
        unameu="$(tr '[:lower:]' '[:upper:]' <<<$(uname))"
        if [[ $unameu == *DARWIN* ]]; then
            os_name="darwin"
        elif [[ $unameu == *LINUX* ]]; then
            os_name="linux"
        elif [[ $unameu == *FREEBSD* ]]; then
            os_name="freebsd"
        elif [[ $unameu == *NETBSD* ]]; then
            os_name="netbsd"
        elif [[ $unameu == *OPENBSD* ]]; then
            os_name="openbsd"
        elif [[ $unameu == *WIN* || $unameu == MSYS* ]]; then
            # Should catch cygwin
            os_name="windows"
            binary+=".exe"
            extension=".zip"
        else
            echo "::error title=Operating System::Aborted, unsupported or unknown OS: $(uname)"
            exit 1
        fi
        echo "binary=$binary" >> $GITHUB_ENV
        echo "extension=$extension" >> $GITHUB_ENV
        echo "architecture=$architecture" >> $GITHUB_ENV
        echo "os_name=$os_name" >> $GITHUB_ENV
        echo "::notice title=Runner Platform::$os_name-$architecture"
      shell: bash

    - name: Detect Downloader
      run: |
        if type -p curl >/dev/null 2>&1; then
          echo "net_getter=curl -fsSL" >> $GITHUB_ENV
        elif type -p wget >/dev/null 2>&1; then
          echo "net_getter=wget -qO-" >> $GITHUB_ENV
        else
          echo "::error title=Downloader404::Aborted, could not find curl or wget"
          exit 1
        fi
      shell: bash

    - name: Install Requirements
      if: env.os_name == 'windows'
      run: winget install jqlang.jq
      shell: bash

    - name: Download Asset
      run: |
        nsp_dir="none-shall-pass-${{ env.os_name }}-${{ env.architecture }}"
        nsp_file="$nsp_dir${{ env.extension }}"
        response=$(${{ env.net_getter }} "https://api.github.com/repos/thevickypedia/none-shall-pass-rustic/releases/tags/v0.2.3-a")
        release_id=$(echo "$response" | jq -r '.id')
        if [ -z "$release_id" ]; then
          echo "::error title=Release ID::Failed to get the release id for '$nsp_file'"
          exit 1
        fi
        echo "Latest Release ID: $release_id"
        tag_name=$(echo "$response" | jq -r '.tag_name')
        published_at=$(echo "$response" | jq -r '.published_at')
        echo "'none-shall-pass-rustic' $tag_name published at $published_at"
        asset_id=$(echo "$response" | jq -r --arg nsp_file "$nsp_file" '.assets[] | select(.name == $nsp_file) | .id')
        if [ -z "$asset_id" ]; then
          echo "::error title=Asset ID::Failed to get the asset id for '$nsp_file'"
          exit 1
        fi
        asset_name=$(echo "$response" | jq -r --arg nsp_file "$nsp_file" '.assets[] | select(.name == $nsp_file) | .name')
        download_url=$(echo "$response" | jq -r --arg nsp_file "$nsp_file" '.assets[] | select(.name == $nsp_file) | .browser_download_url')
        echo "::notice title=Asset ID::$asset_id"
        echo "::notice title=Asset Name::$asset_name"
        echo "::notice title=Download URL::$download_url"
        ${{ env.net_getter }} -H "Accept: application/octet-stream" "$download_url" > $nsp_file
        case "$nsp_file" in
          *.zip)    unzip -o "$nsp_file" ;;
          *.tar.gz) tar -xzf "$nsp_file" ;;
        esac
        mv "$nsp_dir/${{ env.binary }}" . && rm -rf $nsp_dir $nsp_file
        chmod +x ${{ env.binary }}
      shell: bash

    - name: Set Debug Flag
      run: |
        if [ "${{ inputs.debug }}" == "true" ] || [ "${{ env.RUNNER_DEBUG }}" == "1" ]; then
          echo "debug=true" >> $GITHUB_ENV
        else
          echo "debug=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Run Asset
      run: |
        ./${{ env.binary }} --debug ${{ env.debug }} --owner ${{ inputs.owner }} --repo ${{ inputs.repo }} --exclude "${{ inputs.excludeHostnames }}"
      shell: bash

    - name: Summary
      run: |
        if [ ! -f "gh_actions_summary.json" ]; then
          echo "::notice title=Successful Run::No broken hyperlinks found."
          exit 0
        fi
        echo "::error title=Failed Hyperlinks::Check the summary for detailed report."
        echo "## none-shall-pass scan result" >> $GITHUB_STEP_SUMMARY
        jq -c '.[]' gh_actions_summary.json | while read -r obj; do
          filename=$(echo "$obj" | jq -r '.filename')
          filepath=$(echo "$obj" | jq -r '.filepath')
          text=$(echo "$obj" | jq -r '.text')
          url=$(echo "$obj" | jq -r '.url')
          if [[ $filename == *".md" ]]; then
            hyperlink="${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref_name }}/$filepath"
          else
            hyperlink="${{ github.server_url }}/${{ github.repository }}/$filepath"
          fi
          echo "- `$text` => $url in [$filename]($hyperlink)" >> $GITHUB_STEP_SUMMARY
        done
      shell: bash

    - name: Graceful Exit
      if: inputs.failOnError == 'true'
      run: |
        if [ -f "gh_actions_summary.json" ]; then
          exit 1
        fi
      shell: bash

branding:
  icon: check-square
  color: gray-dark
