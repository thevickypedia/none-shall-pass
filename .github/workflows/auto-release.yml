name: auto-release

env:
  version: 3.0a

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  auto_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Set release flag
        run: |
          rel_token="$(date +%s)"
          latest_tag=$(python -c "
          tag_list = '''$(git tag -l)'''.lower().split('\n')
          for version in tag_list:
              if 'prerelease' not in version and '${{ env.version }}'.lower() in version:
                  print(version)
                  break
          else:
              print($rel_token)
          ")
          if [ "$latest_tag" == "$rel_token" ]; then
            echo "release=true" >> $GITHUB_ENV
            echo "No production ready tags were found for version '${{ env.version }}'"
          else
            echo "Tag '$latest_tag' already exists for version '${{ env.version }}'. Skipping prerelease..."
            echo "release=false" >> $GITHUB_ENV
            exit 0
          fi
        shell: bash

      - name: Set tag_name
        if: env.release == 'true'
        run: |
          new_version="v${{ env.version }}-prerelease-$(date +%s)"
          echo "tag_name=$new_version" >> $GITHUB_ENV
        shell: bash

      - name: Set commit message
        if: env.release == 'true'
        run: |
          commit_notes=$(git log -1 --pretty=%B | tr -d '`')
          trimmed=$(echo "$commit_notes" | tr -s '[:space:]' | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "commit_msg=$trimmed" >> $GITHUB_ENV
        shell: bash

      - name: Create New Tag
        if: env.release == 'true'
        run: |
          json_data="{\"tag\":\"${{ env.tag_name }}\",\"message\":\"${{ env.commit_msg }}\",\"object\":\"$(git rev-parse HEAD)\",\"type\":\"commit\"}"
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$json_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/tags")
          sha=$(echo "$response" | tr -d '\000-\037' | jq -r '.sha')
          echo "tag_sha=$sha" >> $GITHUB_ENV
        shell: bash

      - name: Create Tag Reference
        if: env.release == 'true'
        run: |
          json_data="{\"ref\":\"refs/tags/${{ env.tag_name }}\",\"sha\":\"$tag_sha\"}"
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$json_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs"
        shell: bash

      - name: Create New Release
        if: env.release == 'true'
        run: |
          release_data="{\"tag_name\":\"${{ env.tag_name }}\",\"name\":\"${{ env.tag_name }}\",\"body\":\"${{ env.commit_msg }}\",\"draft\":false,\"prerelease\":true}"
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$release_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases")
        shell: bash
