name: auto-release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  auto_release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0
      - name: Get latest version
        run: |
          rel_token="$(date +%s)"
          latest_tag="$(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags | head -n 1)"
          latest_release=$(python -c "
          import urllib.request
          import json
          try:
              with urllib.request.urlopen('https://api.github.com/repos/${{ github.repository }}/releases') as response:
                  data = response.read()
              latest = sorted((r for r in json.loads(data) if not r['prerelease']), key=lambda d: d['created_at'])[-1]['name']
          except Exception:
              latest = '$latest_tag'.lstrip('refs/tags/').split('-')[0]
          print(latest)
          ")
          echo "Latest release version: $latest_release"
          echo "version=$latest_release" >> $GITHUB_ENV
        shell: bash

      - name: Set tag name
        run: |
          new_version="${{ env.version }}-prerelease-$(date +%s)"
          echo "New release version: $new_version"
          echo "tag_name=$new_version" >> $GITHUB_ENV
        shell: bash

      - name: Set commit message
        run: |
          commit_notes=$(git log -1 --pretty=%B | tr -d '`')
          trimmed=$(echo "$commit_notes" | tr -s '[:space:]' | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "commit_msg=$trimmed" >> $GITHUB_ENV
        shell: bash

      - name: Create New Tag
        run: |
          json_data="{\"tag\":\"${{ env.tag_name }}\",\"message\":\"${{ env.commit_msg }}\",\"object\":\"$(git rev-parse HEAD)\",\"type\":\"commit\"}"
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$json_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/tags")
          sha=$(echo "$response" | tr -d '\000-\037' | jq -r '.sha')
          echo "tag_sha=$sha" >> $GITHUB_ENV
        shell: bash

      - name: Create Tag Reference
        run: |
          json_data="{\"ref\":\"refs/tags/${{ env.tag_name }}\",\"sha\":\"$tag_sha\"}"
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$json_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs"
        shell: bash

      - name: Create New Release
        run: |
          release_data="{\"tag_name\":\"${{ env.tag_name }}\",\"name\":\"${{ env.tag_name }}\",\"body\":\"${{ env.commit_msg }}\",\"draft\":false,\"prerelease\":true}"
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$release_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases")
        shell: bash
