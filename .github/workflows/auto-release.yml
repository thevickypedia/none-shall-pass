name: auto-release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  auto_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Set version number
        run: |
          current_version=$(python -c "import src; print(src.version)")
          tag_list=$(git tag -l)
          latest_tag=$(python -c "
          tag_list = '''$tag_list'''.lower().split('\n')
          for version in tag_list:
              if 'prerelease' not in version and '$current_version'.lower() in version:
                  print(version)
                  break
          else:
              print(1)
          ")
          if [ "$latest_tag" != "1" ]; then
            echo "Tag '$latest_tag' already exists for version '$current_version'. Exiting."
            echo "skip=true" >> $GITHUB_ENV
            exit 0
          else
            echo "skip=false" >> $GITHUB_ENV
            echo "No production ready tags were found for version '$current_version'"
          fi
          new_version="v$current_version-prerelease-$(date +%s)"
          echo "tag_name=$new_version" >> $GITHUB_ENV
          new_msg="Creating a pre-release [$new_version] for $current_version"
          echo "commit_msg=$new_msg" >> $GITHUB_ENV
          echo $new_msg
        shell: bash

      - name: Create New Tag
        if: env.skip == 'false'
        run: |
          # Create a new tag with tag_name
          json_data="{\"tag\":\"${{ env.tag_name }}\",\"message\":\"${{ env.commit_msg }}\",\"object\":\"$(git rev-parse HEAD)\",\"type\":\"commit\"}"
          # Create a new tag with the tag_name
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$json_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/tags")
          tag_sha=$(echo "$response" | tr -d '\000-\037' | jq -r '.sha')

          # Create a reference to the new tag
          json_data="{\"ref\":\"refs/tags/${{ env.tag_name }}\",\"sha\":\"$tag_sha\"}"
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$json_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs"
        shell: bash

      - name: Create New Release
        if: env.skip == 'false'
        run: |
          release_data="{\"tag_name\":\"${{ env.tag_name }}\",\"name\":\"${{ env.tag_name }}\",\"body\":\"${{ env.commit_msg }}\",\"draft\":false,\"prerelease\":true}"
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$release_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases")
        shell: bash
