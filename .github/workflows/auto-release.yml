name: auto-release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  auto_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Set version number
        run: |
          current_version=$(python -c "import src; print(src.version)")
          tag_list=$(git tag -l)
          latest_tag=$(python -c "
          tag_list = '''$tag_list'''.lower().split('\n')
          for version in tag_list:
              if 'prerelease' not in version and '$current_version'.lower() in version:
                  print(version)
                  break
          else:
              print(1)
          ")
          if [ "$latest_tag" != "1" ]; then
            echo "Tag '$latest_tag' already exists for version '$current_version'. Exiting."
            exit 0
          else
            echo "No production ready tags were found for version '$current_version'"
          fi
          new_version="v$current_version-prerelease-$(date +%s)"
          echo "tag_name=$new_version" >> $GITHUB_ENV
          echo "Creating a new release for $new_version"
        shell: bash

      - name: Set commit message
        run: |
          commit_message=$(git log -1 --pretty=%B)
          # Remove leading and trailing white spaces (including line breaks and backticks) from the commit message
          stripped_commit_message=$(echo "$commit_message" | tr -d '`' | awk '{$1=$1};1')
          echo "$commit_message" > commit_message.txt
        shell: bash

      - name: Create New Tag
        run: |
          commit_msg=$(cat commit_message.txt)
          # Replace line breaks with \n to preserve multiline content within JSON
          commit_msg_escaped=$(echo "$commit_msg" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\\n/g')
          # Create a new tag with tag_name
          json_data="{\"tag\":\"${{ env.tag_name }}\",\"message\":\"$commit_msg_escaped\",\"object\":\"$(git rev-parse HEAD)\",\"type\":\"commit\"}"
          # Create a new tag with the tag_name
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$json_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/tags")
          tag_sha=$(echo "$response" | tr -d '\000-\037' | jq -r '.sha')

          # Create a reference to the new tag
          json_data="{\"ref\":\"refs/tags/${{ env.tag_name }}\",\"sha\":\"$tag_sha\"}"
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$json_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs"
        shell: bash

      - name: Create New Release
        run: |
          commit_msg=$(cat commit_message.txt)
          # Replace line breaks with \n to preserve multiline content within JSON
          commit_msg_escaped=$(echo "$commit_msg" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\\n/g')
          release_data="{\"tag_name\":\"${{ env.tag_name }}\",\"name\":\"${{ env.tag_name }}\",\"body\":\"$commit_msg_escaped\",\"draft\":false,\"prerelease\":true}"
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "$release_data" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases")
        shell: bash
